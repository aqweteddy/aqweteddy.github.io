<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Teddy&#39;s Blog</title>
		<link>https://aqweteddy.github.io/posts/</link>
		<description>Recent content in Posts on Teddy&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-tw</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 21 Feb 2019 15:02:34 +0800</lastBuildDate>
		<atom:link href="https://aqweteddy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>名詞</title>
			<link>https://aqweteddy.github.io/posts/technical_term/</link>
			<pubDate>Sun, 20 Jan 2019 13:06:27 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/technical_term/</guid>
			<description>&lt;ul&gt;
&lt;li&gt;紀錄專有名詞&lt;/li&gt;
&lt;/ul&gt;</description>
			<content type="html"><![CDATA[<ul>
<li>紀錄專有名詞</li>
</ul>

<h3 id="名詞解釋">名詞解釋</h3>

<ul>
<li>詞向量：將 word 轉為 vector</li>
<li>句向量：</li>
<li>卷積神經網路(CNNs)：處理矩陣輸入任務，將高維度矩陣轉為一維向量，並保留有用訊息，注重全局的模糊感知</li>
<li>循環神經網路(RNNs)：與CNN作用相同，但是注重鄰近位置重構(鄰近位置信息的整合)

<ul>
<li>LSTM:</li>
<li><img src="https://kexue.fm/usr/uploads/2015/08/2067741257.png" alt="LSTM Model" /></li>
</ul></li>
</ul>]]></content>
		</item>
		
		<item>
			<title>Word2vec</title>
			<link>https://aqweteddy.github.io/posts/word2vec/</link>
			<pubDate>Sun, 20 Jan 2019 16:59:48 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/word2vec/</guid>
			<description>&lt;ul&gt;
&lt;li&gt;將文字轉成向量&lt;/li&gt;
&lt;li&gt;不論語言&lt;/li&gt;
&lt;/ul&gt;</description>
			<content type="html"><![CDATA[<ul>
<li>將文字轉成向量</li>
<li>不論語言</li>
</ul>

<h3 id="安裝方法">安裝方法</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">pip install gensim</code></pre></div>
<h3 id="使用方法">使用方法</h3>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="n">model</span> <span class="o">=</span> <span class="n">Word2Vec</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">window</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">min_count</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span>
                 <span class="n">sg</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">workers</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">hs</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="nb">iter</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s1">&#39;models/ptt_text.model&#39;</span><span class="p">)</span> <span class="c1"># save model</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">Word2Vec</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;word2vec.model&#39;</span><span class="p">)</span> <span class="c1"># load model</span></code></pre></div>
<ul>
<li>output: 斷詞後的語料 (2D Array)</li>
<li>參數:

<ul>
<li>iter=5：訓練的回數，訓練過少會使得詞關係過為鬆散，訓練過度又會使得詞關係過為極</li>
<li>size=100：詞向量的維度大小，維度太小會無法有效表達詞與詞的關係，維度太大會使關係太稀疏而難以找出規則</li>
<li>verbose = True 是會印出 word2vec 執行的詳細狀況</li>
<li>alpha:機器學習中的學習率，這東西會逐漸收斂到 min_alpha</li>
<li>sg:sg=1表示採用skip-gram,sg=0 表示採用cbow</li>
<li>window:能往左往右看幾個字</li>
<li>workers:執行緒數目，建議別超過 4</li>
<li>min_count:若這個詞出現的次數小於min_count，那他就不會被視為訓練對象</li>
</ul></li>
</ul>

<h3 id="查詢">查詢</h3>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="n">model</span><span class="o">.</span><span class="n">similarity</span><span class="p">(</span><span class="n">word2</span><span class="p">,</span><span class="n">word1</span><span class="p">)</span> <span class="c1"># 兩字的相似度</span>
<span class="n">model</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="c1"># word 的向量</span>
<span class="n">model</span><span class="o">.</span><span class="n">most_similar</span><span class="p">([</span><span class="n">word</span><span class="p">,</span> <span class="o">...</span> <span class="p">],</span> <span class="n">topn</span><span class="o">=</span><span class="n">N</span><span class="p">)</span> <span class="c1"># 最有關前 Ｎ 字</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Ptt NLP Test</title>
			<link>https://aqweteddy.github.io/posts/ptt_anlysis/</link>
			<pubDate>Sat, 02 Feb 2019 19:42:16 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/ptt_anlysis/</guid>
			<description>&lt;h1 id=&#34;ptt-nlp-分析&#34;&gt;Ptt NLP 分析&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;以&lt;a href=&#34;https://github.com/aqweteddy/PttScrapyMongoDB&#34;&gt;PttScrapyMongoDB&lt;/a&gt;建立數據庫&lt;/li&gt;
&lt;li&gt;以 keras 建立相關模型&lt;/li&gt;
&lt;li&gt;自己寫的斷詞 &lt;a href=&#34;https://github.com/aqweteddy/MandarinTokenizer&#34;&gt;MandarinTokenizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
			<content type="html"><![CDATA[<h1 id="ptt-nlp-分析">Ptt NLP 分析</h1>

<ul>
<li>以<a href="https://github.com/aqweteddy/PttScrapyMongoDB">PttScrapyMongoDB</a>建立數據庫</li>
<li>以 keras 建立相關模型</li>
<li>自己寫的斷詞 <a href="https://github.com/aqweteddy/MandarinTokenizer">MandarinTokenizer</a></li>
</ul>

<h2 id="推文噓文預測">推文噓文預測</h2>

<h3 id="說明">說明</h3>

<ul>
<li>輸入推文內容，回傳可能是「推」或「噓」</li>
<li>LSTM 模型</li>
<li>使用 sigmoid 作為二分激勵函數</li>
<li><a href="https://github.com/aqweteddy/PttNlpAnalyse/blob/master/sentiment2.py">sentiment2.py</a></li>
</ul>

<h3 id="資料預處理">資料預處理</h3>

<ul>
<li>從 MongoDB 中取出八卦版一個月的推噓文</li>
<li>去除不推不噓，由於「推」的數量過多，隨機抽取1/3的「推」作為樣本，噓全取</li>
<li>推: 27837 噓: 18564</li>
<li>以 jieba 分詞，並用 word2Vec 將單字轉為向量</li>
</ul>

<h3 id="結果紀錄">結果紀錄</h3>

<ul>
<li>epoch = 1, stop_words = false, size = 300, window = 5:

<ul>
<li>accuracy: 0.73</li>
</ul></li>
<li>epoch = 2, stop_words = false, size = 100, window = 5:

<ul>
<li>accuracy: 0.72</li>
</ul></li>
<li><strong>epoch = 1, stop_words = true, size = 300, window = 5:</strong>

<ul>
<li><strong>accuracy: 0.76</strong></li>
</ul></li>
<li>epoch = 1, stop_words = true, size = 300, window = 3:

<ul>
<li>accuracy: 0.74</li>
</ul></li>
</ul>

<h2 id="文章二分測試">文章二分測試</h2>

<h3 id="說明-1">說明</h3>

<ul>
<li>輸入文章內容，判斷分類是否為「問卦」</li>
<li>LSTM 模型 (和「推文噓文預測」相同)</li>
<li>使用 sigmoid 作為二分激勵函數</li>
<li><a href="https://github.com/aqweteddy/PttNlpAnalyse/blob/master/sentiment_text.py">sentiment_text.py</a></li>
</ul>

<h3 id="資料預處理-1">資料預處理</h3>

<ul>
<li>從 MongoDB 中取出八卦版 1151 篇文章</li>
<li>以 jieba 分詞，並用 word2Vec 將單字轉為向量</li>
</ul>

<h3 id="最佳結果">最佳結果</h3>

<ul>
<li>accuracy: 0.91</li>
</ul>

<h2 id="文章推文數預測">文章推文數預測</h2>

<ul>
<li>輸入文章內容，推測推數區間 (<0, <20, >20)</li>
</ul>

<h2 id="文章看板分類">文章看板分類</h2>

<h3 id="說明-2">說明</h3>

<ul>
<li>輸入文章，輸出文章最可能出現的板</li>
<li>有六個板：<code>'Gossiping': '0', 'WomenTalk': '1', 'Baseball': '2', 'C_Chat': '3', 'LoL': '4', 'car': '5'</code></li>
<li>Model Type: LSTM / Fast Text</li>
<li>各板爬 100 頁，共 12551 篇文章</li>
<li>90% 為 trainingSet，10% 為 Validation set</li>
</ul>

<h3 id="資料處理方式">資料處理方式</h3>

<ul>
<li>以 jieba 中文斷詞</li>
<li>以 keras.Tokenizer 將單字轉為 index</li>
</ul>

<h3 id="使用方式">使用方式</h3>

<h4 id="class-classifier">class <code>Classifier</code></h4>

<ul>
<li>Member function:

<ol>
<li><code>build_lstm()</code>

<ul>
<li>build lstm Model</li>
</ul></li>
<li><code>fit()</code>

<ul>
<li>開始 train model</li>
</ul></li>
<li><code>get_acc()</code>

<ul>
<li>取得 accuracy</li>
</ul></li>
<li><code>save_model(file :: str)</code>

<ul>
<li>儲存 model 在 <code>file :: str</code> 中</li>
</ul></li>
<li><code>predict_board(text :: str)</code>

<ul>
<li>預測文章 (text) 是哪個板的</li>
</ul></li>
</ol></li>
</ul>

<h3 id="結果">結果</h3>

<h4 id="lstm">LSTM</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Embedding</span><span class="p">(</span><span class="n">embbeding_num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">128</span><span class="p">))</span>
<span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">LSTM</span><span class="p">(</span><span class="mi">128</span><span class="p">))</span>
<span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">))</span>
<span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>
<span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;softmax&#39;</span><span class="p">))</span></code></pre></div>
<ul>
<li>Accuracy:

<ul>
<li>Jieba 斷詞：0.83</li>
<li>自己寫的斷詞：0.84</li>
</ul></li>
</ul>

<h4 id="fasttext">FastText</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>
    <span class="n">Embedding</span><span class="p">(</span><span class="n">embbeding_num</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">input_length</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
<span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">GlobalMaxPooling1D</span><span class="p">())</span>
<span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;sigmoid&#39;</span><span class="p">))</span></code></pre></div>
<ul>
<li>Accuracy:

<ul>
<li>Jieba 斷詞：0.91</li>
<li>自己寫的斷詞：0.90</li>
</ul></li>
</ul>

<h2 id="一些問題">一些問題</h2>

<ol>
<li>為何推文噓文預測和文章二分測試使用同樣模型準確度卻差非常多？

<ul>
<li>推噓文的每個樣本長度過短</li>
<li>推噓文的特徵不明顯</li>
</ul></li>
</ol>]]></content>
		</item>
		
		<item>
			<title>Ptt 文章分板判斷</title>
			<link>https://aqweteddy.github.io/posts/ptt_analysis2/</link>
			<pubDate>Wed, 03 Apr 2019 23:55:15 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/ptt_analysis2/</guid>
			<description>Data Set &amp;lsquo;Gossiping&amp;rsquo;, &amp;lsquo;WomenTalk&amp;rsquo;, &amp;lsquo;Baseball&amp;rsquo;, &amp;lsquo;C_Chat&amp;rsquo;, &amp;lsquo;Beauty&amp;rsquo; 各 50 頁的文章 jieba 斷詞 Fast text / LSTM Fast Text LSTM Title 0.93 0.87 Text 0.87 0.78 Code on GitHub Best: FastText + title Bayes Best: Title + CountVectorizer Code: Classify by text Classify by title Use Text no cut + CountVectorizer cut + CountVectorizer CountVectorizer + Tfidf with cut Tfidf with cut Accuracy 0.68 0.85 0.83 0.81</description>
			<content type="html"><![CDATA[

<h2 id="data-set">Data Set</h2>

<ul>
<li>&lsquo;Gossiping&rsquo;, &lsquo;WomenTalk&rsquo;, &lsquo;Baseball&rsquo;, &lsquo;C_Chat&rsquo;, &lsquo;Beauty&rsquo; 各 50 頁的文章</li>
<li>jieba 斷詞</li>
<li></li>
</ul>

<h2 id="fast-text-lstm">Fast text / LSTM</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center">Fast Text</th>
<th align="center">LSTM</th>
</tr>
</thead>

<tbody>
<tr>
<td>Title</td>
<td align="center">0.93</td>
<td align="center">0.87</td>
</tr>

<tr>
<td>Text</td>
<td align="center">0.87</td>
<td align="center">0.78</td>
</tr>
</tbody>
</table>

<ul>
<li><p><a href="https://github.com/aqweteddy/PttNlpAnalyse/blob/master/guessBoard/keras_lstm_FastText.ipynb">Code on GitHub</a></p></li>

<li><p>Best: FastText + title</p></li>

<li><p><img src="https://i.imgur.com/pUkZ9n0.png" alt="" /></p></li>
</ul>

<h2 id="bayes">Bayes</h2>

<ul>
<li>Best: Title + CountVectorizer</li>
<li>Code:

<ul>
<li><a href="https://github.com/aqweteddy/PttNlpAnalyse/blob/master/guessBoard/bayes_classifier_by_text.ipynb">Classify by text</a></li>
<li><a href="https://github.com/aqweteddy/PttNlpAnalyse/blob/master/guessBoard/bayes_classifier_by_title.ipynb">Classify by title</a></li>
</ul></li>
</ul>

<h3 id="use-text">Use Text</h3>

<table>
<thead>
<tr>
<th></th>
<th align="center">no cut + CountVectorizer</th>
<th align="center">cut + CountVectorizer</th>
<th align="center">CountVectorizer + Tfidf with cut</th>
<th align="center">Tfidf with cut</th>
</tr>
</thead>

<tbody>
<tr>
<td>Accuracy</td>
<td align="center">0.68</td>
<td align="center">0.85</td>
<td align="center">0.83</td>
<td align="center">0.81</td>
</tr>
</tbody>
</table>

<h4 id="best-detail-cut-countvectorizer">Best detail (cut + CountVectorizer)</h4>

<table>
<thead>
<tr>
<th></th>
<th align="center">precision</th>
<th align="center">recall</th>
<th align="center">f1-score</th>
<th align="center">support</th>
</tr>
</thead>

<tbody>
<tr>
<td>Baseball</td>
<td align="center">0.96</td>
<td align="center">0.96</td>
<td align="center">0.96</td>
<td align="center">100</td>
</tr>

<tr>
<td>Beauty</td>
<td align="center">0.91</td>
<td align="center">0.94</td>
<td align="center">0.92</td>
<td align="center">98</td>
</tr>

<tr>
<td>C_Chat</td>
<td align="center">0.81</td>
<td align="center">0.86</td>
<td align="center">0.83</td>
<td align="center">101</td>
</tr>

<tr>
<td>Gossiping</td>
<td align="center">0.85</td>
<td align="center">0.55</td>
<td align="center">0.67</td>
<td align="center">85</td>
</tr>

<tr>
<td>WomenTalk</td>
<td align="center">0.69</td>
<td align="center">0.84</td>
<td align="center">0.76</td>
<td align="center">89</td>
</tr>

<tr>
<td>avg / total</td>
<td align="center">0.85</td>
<td align="center">0.84</td>
<td align="center">0.84</td>
<td align="center">473</td>
</tr>
</tbody>
</table>

<h3 id="use-title">Use Title</h3>

<table>
<thead>
<tr>
<th></th>
<th align="center">cut + CountVectorizer</th>
<th align="center">CountVectorizer + Tfidf with cut</th>
<th align="center">Tfidf with cut</th>
</tr>
</thead>

<tbody>
<tr>
<td>Accuracy</td>
<td align="center">0.91</td>
<td align="center">0.65</td>
<td align="center">0.69</td>
</tr>
</tbody>
</table>

<h4 id="best-detail-cut-countvectorizer-1">Best detail (cut + CountVectorizer)</h4>

<table>
<thead>
<tr>
<th></th>
<th align="center">precision</th>
<th align="center">recall</th>
<th align="center">f1-score</th>
<th align="center">support</th>
</tr>
</thead>

<tbody>
<tr>
<td>Baseball</td>
<td align="center">0.96</td>
<td align="center">0.86</td>
<td align="center">0.91</td>
<td align="center">80</td>
</tr>

<tr>
<td>Beauty</td>
<td align="center">0.96</td>
<td align="center">0.98</td>
<td align="center">0.97</td>
<td align="center">109</td>
</tr>

<tr>
<td>C_Chat</td>
<td align="center">0.92</td>
<td align="center">0.77</td>
<td align="center">0.84</td>
<td align="center">99</td>
</tr>

<tr>
<td>Gossiping</td>
<td align="center">0.96</td>
<td align="center">0.98</td>
<td align="center">0.97</td>
<td align="center">91</td>
</tr>

<tr>
<td>WomenTalk</td>
<td align="center">0.75</td>
<td align="center">0.91</td>
<td align="center">0.83</td>
<td align="center">94</td>
</tr>

<tr>
<td>avg / total</td>
<td align="center">0.91</td>
<td align="center">0.90</td>
<td align="center">0.90</td>
<td align="center">473</td>
</tr>
</tbody>
</table>

<h3 id="經比對">經比對</h3>

<ol>
<li>Baseball 的準確率總是最高，可能跟專有名詞多有關</li>
<li>WomenTalk 的準確率總是最低，可能和 Gossiping 搞混</li>
</ol>

<h2 id="結論">結論</h2>

<ul>
<li>使用 title 比 text 更準確，可能與資料清洗有關</li>
<li>樣本數若再提高可能可以提高準確度</li>
</ul>

<h3 id="randomforestclassifier">RandomForestClassifier</h3>

<p>|             | precision | recall | f1-score | support |
   | &mdash;&mdash;&mdash;&ndash; | :&mdash;&mdash;-: | :&mdash;-: | :&mdash;&mdash;: | :&mdash;&ndash;: |
   | Baseball    |   0.97    |  0.77  |   0.86   |   74    |
   | Beauty      |   0.99    |  0.98  |   0.99   |   105   |
   | C_Chat      |   0.86    |  0.73  |   0.79   |   97    |
   | Gossiping   |   0.89    |  0.97  |   0.93   |   96    |
   | WomenTalk   |   0.74    |  0.90  |   0.81   |   101   |
   | avg / total |   0.89    |  0.88  |   0.88   |   473   |</p>
]]></content>
		</item>
		
		<item>
			<title>Microsoft CV - Side Project</title>
			<link>https://aqweteddy.github.io/posts/microsoft_cv/</link>
			<pubDate>Tue, 12 Mar 2019 21:11:58 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/microsoft_cv/</guid>
			<description>Ptt 資料爬取套件 由於我對於NLP相關有興趣，想要有大量對某項議題的討論，所以我寫了這個套件，將文章資訊寫入資料庫中，當需要分析時再取出。這個套</description>
			<content type="html"><![CDATA[

<h3 id="ptt-資料爬取套件">Ptt 資料爬取套件</h3>

<p>由於我對於NLP相關有興趣，想要有大量對某項議題的討論，所以我寫了這個套件，將文章資訊寫入資料庫中，當需要分析時再取出。這個套件可以爬取ptt文章上幾乎所有資訊，例如：IP、ID、推噓文 … 等，並有兩種儲存方式：存入 MongoDB 或是 json 檔。</p>

<ul>
<li>Github:  <a href="https://github.com/aqweteddy/PttScrapyMongoDB">https://github.com/aqweteddy/PttScrapyMongoDB</a></li>
</ul>

<h3 id="pttnlptest">PttNlpTest</h3>

<p>這個是我利用「Ptt資料爬取套件」蒐集好資料後所做的練習，目前有2個項目：推噓文預測、文章看板分類。</p>

<ul>
<li>Github：<a href="https://github.com/aqweteddy/PttNlpAnalyse">https://github.com/aqweteddy/PttNlpAnalyse</a></li>
<li>結果紀錄 &amp; 詳細說明：<a href="https://aqweteddy.github.io/posts/ptt_anlysis/">https://aqweteddy.github.io/posts/ptt_anlysis/</a></li>
</ul>

<p>(1) 推噓文預測</p>

<ul>
<li>輸入推文內容，輸出較可能是「推」或「噓」</li>
<li>LSTM 模型</li>
<li>最佳準確率：0.76</li>
</ul>

<p>(2) 文章看板分類</p>

<ul>
<li>輸入文章內文，輸出文章最可能出現的板</li>
<li>LSTM / FastText 模型</li>
<li>最佳準確率：

<ul>
<li>LSTM:

<ul>
<li>Jieba 斷詞：0.83</li>
<li>自己寫的斷詞：0.84</li>
</ul></li>
<li>FastText: 0.91

<ul>
<li>Jieba 斷詞：0.91</li>
<li>自己寫的斷詞：0.90</li>
</ul></li>
</ul></li>
</ul>

<h2 id="mandarintokenizer-中文斷詞工具">MandarinTokenizer 中文斷詞工具</h2>

<ul>
<li>以雙向匹配法所寫的斷詞工具，且有平行處理功能。</li>
<li>原始碼：<a href="https://github.com/aqweteddy/MandarinTokenizer">https://github.com/aqweteddy/MandarinTokenizer</a></li>
<li>使用語言： Python</li>
<li>平行處理功能：當字數 &gt; T (預設 T = 10000) 時，將文本分為 N 個部分（預設 N = 2），放入不同 Process 處理</li>
</ul>

<h3 id="ptt-圖片爬取器-網頁">Ptt 圖片爬取器 (網頁)</h3>

<p>由於同學常在抱怨Ptt表特版圖片一張張下載收集很累，所以我就寫了這個網站，可以根據不同板、分類爬取圖片，並批量下載原圖。</p>

<ul>
<li>網址：<a href="http://pttcrawlimage.herokuapp.com/">http://pttcrawlimage.herokuapp.com/</a></li>
<li>Github：<a href="https://github.com/aqweteddy/PttCrawlWebsite">https://github.com/aqweteddy/PttCrawlWebsite</a></li>
</ul>

<h3 id="螢幕定時器-for-macos">螢幕定時器 for MacOS</h3>

<p>寫程式時間都是以幾個小時計算的，但是醫生建議至少每四十分鐘讓眼睛休息一下，所以我寫了這個程式，每當螢幕開啟指定分鐘數時，就會跳出通知，五秒後關閉螢幕，提醒使用者該休息了！</p>

<p>•   Github：<a href="https://github.com/aqweteddy/TimerSleep">https://github.com/aqweteddy/TimerSleep</a></p>
]]></content>
		</item>
		
		<item>
			<title>CodeJam 2018 Round1C</title>
			<link>https://aqweteddy.github.io/posts/codejam-2018-round1c/</link>
			<pubDate>Mon, 04 Mar 2019 22:59:26 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/codejam-2018-round1c/</guid>
			<description>A. A Whole New Word 題目描述 URL 給定一個字元矩陣 \(N \times L\)，每個 column 選一個字母組成一個新單字，但不和 row 成的單字重複，輸出任意一個單字，若無輸出“-” 解題</description>
			<content type="html"><![CDATA[

<h2 id="a-a-whole-new-word">A. A Whole New Word</h2>

<h3 id="題目描述">題目描述</h3>

<ul>
<li><a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000007765/000000000003e064">URL</a></li>
<li>給定一個字元矩陣 \(N \times L\)，每個 column 選一個字母組成一個新單字，但不和 row 成的單字重複，輸出任意一個單字，若無輸出“-”</li>
</ul>

<h3 id="解題思路">解題思路</h3>

<ul>
<li>暴力 + 剪枝</li>
<li>紀錄每個 column</li>
<li>遞迴拼出所有可能性</li>
<li>剪枝：

<ul>
<li>開一個陣列紀錄 column[k] 下 A-Z 是否使用過</li>
<li>若沒有：遞迴，並將 flag 設為 1</li>
<li>若有：跳過</li>
</ul></li>
<li>如此一來，每從一個 Column 決定一個字元最多只會呼叫 26 次遞迴</li>
</ul>

<h3 id="code">Code</h3>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">set</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">exist</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">dic</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">L</span><span class="p">,</span> <span class="n">N</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">fl</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">generate_word</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">fl</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">L</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="n">exist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">exist</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">str</span><span class="p">)</span> <span class="o">==</span> <span class="n">exist</span><span class="p">.</span><span class="n">end</span><span class="p">()){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
            <span class="n">fl</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">bool</span> <span class="n">used</span><span class="p">[</span><span class="mi">30</span><span class="p">];</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">30</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">used</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
       <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">used</span><span class="p">[</span><span class="n">dic</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span><span class="p">]){</span>
            <span class="n">generate_word</span><span class="p">(</span><span class="n">str</span> <span class="o">+</span> <span class="n">dic</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
            <span class="n">used</span><span class="p">[</span><span class="n">dic</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
       <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">solve</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">generate_word</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fl</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;-</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">ncase</span><span class="p">;</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">ncase</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">ncase</span><span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">L</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">dic</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
        <span class="n">exist</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
        <span class="n">dic</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
        <span class="n">fl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">in</span><span class="p">;</span>
            <span class="n">exist</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">in</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">){</span>
                <span class="n">dic</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Case #&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;: &#34;</span><span class="p">;</span>
        <span class="n">solve</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>CodeJam 2018 Qualification Round</title>
			<link>https://aqweteddy.github.io/posts/codejam-2018-qualificationround/</link>
			<pubDate>Mon, 04 Mar 2019 20:57:18 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/codejam-2018-qualificationround/</guid>
			<description>A. Saving The Universe Again 題目描述 URL 給一串只有 C 和 S 的字串和一個數字 K，C 表示累積能量 * 2，S 表示攻擊，輸出 swap 最少次數，使得每次攻擊所射出能量 &amp;lt;= K，若無法則</description>
			<content type="html"><![CDATA[

<h2 id="a-saving-the-universe-again">A. Saving The Universe Again</h2>

<h3 id="題目描述">題目描述</h3>

<ul>
<li><a href="https://codingcompetitions.withgoogle.com/codejam/round/00000000000000cb/0000000000007966">URL</a></li>
<li>給一串只有 C 和 S 的字串和一個數字 K，C 表示累積能量 * 2，S 表示攻擊，輸出 swap 最少次數，使得每次攻擊所射出能量 &lt;= K，若無法則輸出<strong>IMPOSSIBLE</strong></li>
<li>注意：

<ul>
<li>兩相鄰元素才能 swap</li>
<li>C 是累積的，例如 SCCSS 所輸出的總能量是： 1 + 4 + 4 = 9</li>
</ul></li>
</ul>

<h3 id="解題思路">解題思路</h3>

<ul>
<li>考慮長度只有 2 的情況下，要使輸出能量降低的交換只有 <em>CS</em> -&gt; <em>SC</em> 這個組合</li>
<li>考慮長度為 N，則要降低輸出，就要盡量把 C 往後移</li>
<li>如同 Bubble sort 一樣，重複檢查 A[i] = C、A[i+1] = S 的情況，SWAP 它，次數 + 1

<ul>
<li>考慮要從後往前或從前往後：</li>
<li>要盡量把 C 往後擺，保證 C 後面沒有 S ＝&gt; 由後往前</li>
<li>由前往後所造成的能量減少較少，因為交換後 C 後面不保證沒有 S</li>
<li>注意每次交換後，要將迭代器初始至尾的位置</li>
</ul></li>
<li>若執行為 N ^ 2 次仍沒有結果，則為不可能(因為最左邊的 C 右邊已沒有 S)</li>
</ul>

<h3 id="code">Code</h3>
<div class="highlight"><pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="c1">// AC
</span><span class="c1"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">shield</span><span class="p">;</span>
<span class="n">string</span> <span class="n">attack</span><span class="p">;</span>

<span class="n">ll</span> <span class="nf">calc</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">in</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ll</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">&amp;</span> <span class="nl">c</span> <span class="p">:</span> <span class="n">in</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;C&#39;</span><span class="p">)</span>
            <span class="n">step</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">step</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">solve</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">calc</span><span class="p">(</span><span class="n">attack</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">shield</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">attack</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">attack</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="o">--</span><span class="n">j</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">attack</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;C&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">attack</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;S&#39;</span><span class="p">){</span>
                <span class="o">++</span> <span class="n">step</span><span class="p">;</span>
                <span class="n">swap</span><span class="p">(</span><span class="n">attack</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">attack</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
                <span class="k">if</span><span class="p">(</span><span class="n">calc</span><span class="p">(</span><span class="n">attack</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">shield</span><span class="p">){</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">step</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">attack</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;IMPOSSIBLE</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nc</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">nc</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="o">&lt;=</span><span class="n">nc</span><span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">shield</span> <span class="o">&gt;&gt;</span> <span class="n">attack</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="s">&#34;Case #&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;: &#34;</span><span class="p">;</span>
        <span class="n">solve</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="b-trouble-sort">B. Trouble Sort</h2>

<h3 id="題目描述-1">題目描述</h3>

<ul>
<li><p><a href="https://codingcompetitions.withgoogle.com/codejam/round/00000000000000cb/00000000000079cb">URL</a></p></li>

<li><p>定義一個錯誤的排序法，問其可否輸出正確的排序結果，若可以，輸出 <em>OK</em> ，不可以，輸出出現錯誤的處的 index</p></li>

<li><p>排序法如下：</p>

<ul>
<li>抓取 L 中 [i, i+3) 的 element</li>
<li>若  L[i] &gt; L[i + 2]，則 Swap(L[i], L[i + 2])</li>
<li>其他則繼續執行下一組 [i+1, i+4)</li>
</ul></li>
</ul>

<h3 id="解題思路-1">解題思路</h3>

<ul>
<li>觀察該排序法，可發現在 L 中，任一元素 L[i] 只會跟 L[i + 2] 比較</li>
<li>若將 L 分為 L[0: -1 :2] 和 L[1: -1 :2] 的兩個子陣列，不論該演算法怎麼交換，兩子陣列的元素都不會交換到</li>
<li>因此該演算法可以當作：

<ol>
<li>分別 sort L[0: -1 :2] 和 L[1: -1 :2]</li>
<li>再交叉合併</li>
<li>得到和執行該演算法相同結果</li>
</ol></li>
<li>如此一來 O(N^2) -&gt; O(N log N)</li>
</ul>

<h3 id="code-1">Code</h3>
<div class="highlight"><pre class="chroma"><code class="language-py3" data-lang="py3"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
    <span class="n">inp</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)))</span>
    <span class="n">sub_a</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="mi">0</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">sub_b</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">inp</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">inp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub_a</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">inp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub_b</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">inp</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">inp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">inp</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">return</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;OK&#39;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">NC</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">NC</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Case #</span><span class="si">{}</span><span class="s1">: &#39;</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
        <span class="n">main</span><span class="p">()</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>CodeJam 2018 Round1A</title>
			<link>https://aqweteddy.github.io/posts/codejam-2018-round1ay/</link>
			<pubDate>Sun, 03 Mar 2019 16:43:08 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/codejam-2018-round1ay/</guid>
			<description>A. WaffleChoppers 題目描述 URL Input: R: MAX_ROW, C: MAX_COL, H: 水平方向切幾刀 V: 垂直方向切幾刀 一個二維矩陣 [R*C]：每格為 1 or 0 在水平方向切 H 刀、垂直方向切 V 刀的情況下，問可否</description>
			<content type="html"><![CDATA[

<h2 id="a-wafflechoppers">A. WaffleChoppers</h2>

<h3 id="題目描述">題目描述</h3>

<ul>
<li><p><a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000007883/000000000003005a">URL</a></p></li>

<li><p>Input:</p>

<ul>
<li>R: MAX_ROW, C: MAX_COL, H: 水平方向切幾刀 V: 垂直方向切幾刀</li>
<li>一個二維矩陣 [R*C]：每格為 1 or 0</li>
</ul></li>

<li><p>在水平方向切 H 刀、垂直方向切 V 刀的情況下，問可否達到每個區域都有相同數量的 1</p></li>

<li><p>Output: 可否達成目標</p></li>
</ul>

<h3 id="解題思路">解題思路</h3>

<ol>
<li>先判斷出特殊解：

<ul>
<li>矩陣全為 0</li>
</ul></li>
<li>因為每格要相同數量，所以整張圖1的數量應要整除於 H+1 和 V+1</li>
<li>計算每個 Row 的 1 的數量，記錄在一維陣列 r_tab</li>
<li>計算每個 Col 的 1 的數量，記錄在一維陣列 c_tab</li>
<li>因為每格要相同數量，所以直著切要可以平分成 H+1 等分

<ul>
<li>紀錄切點位置</li>
<li>根據 r_tab 切分</li>
<li>如果無粉平分，則無法達成目標</li>
</ul></li>
<li>因為每格要相同數量，所以橫著切要可以平分成 V+1 等分

<ul>
<li>紀錄切點位置</li>
<li>根據 c_tab 切分</li>
<li>如果無粉平分，則無法達成目標</li>
</ul></li>
<li>根據切點檢查每格是否是相同數量

<ul>
<li>若是，達成目標</li>
<li>否則，無法達成</li>
</ul></li>
<li>演算法效率：O(R * C)，因為 Step 7 每個區域都要掃過一次</li>
</ol>

<h3 id="code">Code</h3>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">// AC
</span><span class="c1"></span>
<span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">maze</span><span class="p">[</span><span class="mi">101</span><span class="p">][</span><span class="mi">101</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">R</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">H</span><span class="p">,</span> <span class="n">V</span><span class="p">;</span> <span class="c1">// row, col, horizontal, vertical
</span><span class="c1"></span><span class="kt">int</span> <span class="n">cnt_all</span><span class="p">;</span> <span class="c1">// count for the number of chocolate chips.
</span><span class="c1"></span>
<span class="kt">bool</span> <span class="nf">bound_count</span><span class="p">(</span><span class="kt">int</span> <span class="n">min_h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">min_v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">max_h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">max_v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">per</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">min_h</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">max_h</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">min_v</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">max_v</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
                <span class="o">++</span><span class="n">cnt</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">cnt</span> <span class="o">==</span> <span class="n">per</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">solve</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cnt_all</span> <span class="o">%</span> <span class="p">((</span><span class="n">H</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">V</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;IMPOSSIBLE</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cnt_all</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;POSSIBLE</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">r_tab</span><span class="p">[</span><span class="mi">101</span><span class="p">],</span> <span class="n">c_tab</span><span class="p">[</span><span class="mi">101</span><span class="p">];</span>

    <span class="c1">// generate table
</span><span class="c1"></span>    <span class="n">memset</span><span class="p">(</span><span class="n">r_tab</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">r_tab</span><span class="p">);</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">c_tab</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">c_tab</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
            <span class="n">r_tab</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">maze</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
            <span class="n">c_tab</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">maze</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="c1">// calculate
</span><span class="c1"></span>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">r_cut</span><span class="p">,</span> <span class="n">c_cut</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">r_per</span> <span class="o">=</span> <span class="n">cnt_all</span> <span class="o">/</span> <span class="p">(</span><span class="n">H</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
        <span class="n">c_per</span> <span class="o">=</span> <span class="n">cnt_all</span> <span class="o">/</span> <span class="p">(</span><span class="n">V</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">now</span> <span class="o">+=</span> <span class="n">r_tab</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">==</span> <span class="n">r_per</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">r_cut</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">&gt;</span> <span class="n">r_per</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;IMPOSSIBLE</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">now</span> <span class="o">+=</span> <span class="n">c_tab</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">==</span> <span class="n">c_per</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">c_cut</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">&gt;</span> <span class="n">c_per</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;IMPOSSIBLE</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">per</span> <span class="o">=</span> <span class="n">r_per</span> <span class="o">/</span> <span class="p">(</span><span class="n">V</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">r_pre</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">c_pre</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r_cut</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c_cut</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">bound_count</span><span class="p">(</span><span class="n">r_pre</span><span class="p">,</span> <span class="n">c_pre</span><span class="p">,</span> <span class="n">r_cut</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">c_cut</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">per</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;IMPOSSIBLE</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">c_pre</span> <span class="o">=</span> <span class="n">c_cut</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">c_pre</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">r_pre</span> <span class="o">=</span> <span class="n">r_cut</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;POSSIBLE</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">ncase</span><span class="p">;</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">ncase</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">ncase</span><span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">string</span> <span class="n">in</span><span class="p">;</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">maze</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">maze</span><span class="p">);</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">R</span> <span class="o">&gt;&gt;</span> <span class="n">C</span> <span class="o">&gt;&gt;</span> <span class="n">H</span> <span class="o">&gt;&gt;</span> <span class="n">V</span><span class="p">;</span>
        <span class="n">cnt_all</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">in</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">in</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;@&#39;</span><span class="p">)</span>
                    <span class="n">maze</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="o">++</span><span class="n">cnt_all</span><span class="p">;</span>
                <span class="k">else</span>
                    <span class="n">maze</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Case #&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;: &#34;</span><span class="p">;</span>
        <span class="n">solve</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="b-bitparty">B. BitParty</h2>

<h3 id="題目描述-1">題目描述</h3>

<ul>
<li><p><a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000007883/000000000002fff6">URL</a></p></li>

<li><p>有 C 台機器要平行處理 B 個物品，一次可啟用 R 台，其中每台機器最多可處理 M[i] 個物品，需要花費 <code>(S[i] * N) + P[i], N &lt;= M[i]</code> 的時間，問：處理完 B 個物品，最少花費多少時間？</p></li>
</ul>

<h3 id="解題思路-1">解題思路</h3>

<ul>
<li>二分搜時間 T(t)

<ul>
<li>若在 t 內可做到 mid = l</li>
<li>若在 t 內不可做到 mid = r</li>
</ul></li>
<li>如何算「第 i 台機器在 t 秒內所能處理的最大物品數(N[i])」?

<ol>
<li>因為 <code>t = (S[i] * N) + P[i]</code></li>
<li>所以 <code>N = (t - P[i]) / S[i]，其中 N &lt;= M[i]</code></li>
<li>所以 <code>N[i] = min(M[i], (t - P[i]) / S[i])</code></li>
<li>考慮 <code>t &lt; P[i]</code> 時值為負，<code>N[i] = max(0, min(M[i], (t - P[i]) / S[i]))</code></li>
</ol></li>
<li>遞增排序 Array N，持續將物品放入機器中，直到：

<ul>
<li>已放入物品數量 &gt;= B &ndash;&gt; return True</li>
<li>已放入物品數量 &gt;= <code>min(R, C)</code> &ndash;&gt; return False</li>
</ul></li>
</ul>

<h3 id="注意">注意</h3>

<ol>
<li>long long</li>
<li>二分搜的 Initial Value</li>
<li>INF 值:

<ul>
<li>int: <code>INT_MAX</code> or <code>0x3f3f3f3f</code></li>
<li>long long: <code>__LONG_LONG_MAX__</code></li>
</ul></li>
<li>0ll: 將 int 轉為 long long</li>
</ol>

<h3 id="code-1">Code</h3>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="c1">// AC
</span><span class="c1"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="n">ll</span> <span class="n">INF</span> <span class="o">=</span> <span class="n">__LONG_LONG_MAX__</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">R</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">Cashier</span>
<span class="p">{</span>
    <span class="n">ll</span> <span class="n">m</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">;</span>
    <span class="n">Cashier</span><span class="p">(</span><span class="n">ll</span> <span class="n">a</span><span class="p">,</span> <span class="n">ll</span> <span class="n">b</span><span class="p">,</span> <span class="n">ll</span> <span class="n">c</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">a</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">Cashier</span><span class="o">&gt;</span> <span class="n">inp</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">cmp</span><span class="p">(</span><span class="k">const</span> <span class="n">ll</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">ll</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">check</span><span class="p">(</span><span class="n">ll</span> <span class="n">t</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">bit</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">const</span> <span class="n">Cashier</span><span class="o">&amp;</span> <span class="nl">c</span> <span class="p">:</span> <span class="n">inp</span><span class="p">){</span>
        <span class="n">ll</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mi">0ll</span><span class="p">,</span> <span class="n">min</span><span class="p">((</span><span class="n">t</span> <span class="o">-</span> <span class="n">c</span><span class="p">.</span><span class="n">p</span><span class="p">)</span> <span class="o">/</span> <span class="n">c</span><span class="p">.</span><span class="n">s</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">m</span><span class="p">));</span>
        <span class="n">bit</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">bit</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">bit</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">cmp</span><span class="p">);</span>
    <span class="n">ll</span> <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">ll</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">bit</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">now</span> <span class="o">+=</span> <span class="n">bit</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="o">&gt;=</span> <span class="n">B</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">R</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">solve</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ll</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">INF</span><span class="p">,</span> <span class="n">ans</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">ll</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">check</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">nc</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">nc</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">n</span><span class="o">&lt;=</span><span class="n">nc</span><span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">){</span>
        <span class="n">inp</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">R</span> <span class="o">&gt;&gt;</span> <span class="n">B</span> <span class="o">&gt;&gt;</span> <span class="n">C</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">C</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">ll</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>
            <span class="n">inp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Cashier</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="s">&#34;Case #&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;: &#34;</span><span class="p">;</span>
        <span class="n">solve</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Course</title>
			<link>https://aqweteddy.github.io/posts/course/</link>
			<pubDate>Wed, 27 Feb 2019 01:06:48 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/course/</guid>
			<description>說明 這是各學期在中正資工上課所保留下來的 Code 大一上 程式設計(一) 大一下 物件導向程式設計 大二下必修 程式設計(二) 大二上 組合語言 資料結構</description>
			<content type="html"><![CDATA[

<hr />

<h3 id="說明">說明</h3>

<ul>
<li>這是各學期在中正資工上課所保留下來的 Code</li>
</ul>

<h3 id="大一上">大一上</h3>

<ul>
<li><a href="https://github.com/aqweteddy/ProgreamDesign-1">程式設計(一)</a></li>
</ul>

<h3 id="大一下">大一下</h3>

<ul>
<li><a href="https://github.com/aqweteddy/OOP">物件導向程式設計</a> 大二下必修</li>
<li><a href="https://github.com/aqweteddy/ProgramDesign-2">程式設計(二)</a></li>
</ul>

<h3 id="大二上">大二上</h3>

<ul>
<li><a href="https://github.com/aqweteddy/AssemblyLanguage">組合語言</a></li>
<li><a href="https://github.com/aqweteddy/DataStructure">資料結構</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>安裝 Hugo 建制部落格，並集成 LaTeX</title>
			<link>https://aqweteddy.github.io/posts/hugo_install/</link>
			<pubDate>Thu, 21 Feb 2019 15:37:19 +0800</pubDate>
			
			<guid>https://aqweteddy.github.io/posts/hugo_install/</guid>
			<description>&lt;ul&gt;
&lt;li&gt;安裝 Hugo&lt;/li&gt;
&lt;li&gt;Hugo 基本指令&lt;/li&gt;
&lt;li&gt;增加 LaTeX&lt;/li&gt;
&lt;/ul&gt;</description>
			<content type="html"><![CDATA[<ul>
<li>安裝 Hugo</li>
<li>Hugo 基本指令</li>
<li>增加 LaTeX</li>
</ul>

<h3 id="install-hugo">Install Hugo</h3>

<h4 id="environment">Environment</h4>

<ul>
<li>OS: MAC OS Mojave</li>
<li>Package Manager: brew</li>
</ul>

<h4 id="step">Step</h4>

<ol>
<li><code>brew install hugo</code></li>
</ol>

<h4 id="create-new-blog">Create new blog</h4>

<ol>
<li><code>hugo new site [blog_name]</code></li>
</ol>

<h4 id="create-new-article">Create new article</h4>

<ol>
<li><code>hugo new [path][page_name]</code>

<ul>
<li>create <code>.md</code> in <code>[path_to_project]/content</code></li>
</ul></li>
</ol>

<h4 id="run-server">Run server</h4>

<ul>
<li><code>hugo server -D</code></li>
</ul>

<h4 id="github-page">github Page</h4>

<ol>
<li>create a new empty project in github.</li>
<li>use command <code>hugo</code> to save result in <code>[proj]/public</code></li>
<li>do following command:</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> public
git init
git add .
git commit -m <span class="s2">&#34;first&#34;</span>
git push</code></pre></div>
<h3 id="latex">LaTeX</h3>

<h3 id="加入">加入</h3>

<ul>
<li>主題包中，修改 <code>layouts/baseof.html</code>，在 head 標籤中最前面加入以下程式碼即可</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!-- KaTeX --&gt;</span>
<span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css&#34;</span>
		<span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-TEMocfGvRuD1rIAacqrknm5BQZ7W7uWitoih+jMNFXQIbNl16bO8OZmylH/Vi/Ei&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.js&#34;</span>
		<span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-jmxIlussZWB7qCuB+PgKG1uLjjxbVVIayPJwi6cG6Zb4YKq0JIw+OMnkkEC7kYCq&#34;</span>
		<span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/contrib/auto-render.min.js&#34;</span>
		<span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-IiI65aU9ZYub2MY9zhtKd1H2ps7xxf+eb2YFG9lX6uRqpXCvBTOidPRCXCrQ++Uc&#34;</span>
		<span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></code></pre></div>
<h3 id="使用方法">使用方法</h3>

<ul>
<li>Inline: <code>\\(</code>  內容 <code>\\)</code></li>
<li>區塊: <code>$$</code> 內容 <code>$$</code></li>
</ul>

<h3 id="範例">範例</h3>

<ul>
<li>\(2 \times3\)</li>
<li>$$2\times3$$</li>
</ul>]]></content>
		</item>
		
	</channel>
</rss>
